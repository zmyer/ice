// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

apply plugin: 'com.android.application'
apply from: "$project.ext.topSrcDir/java/gradle/ice.gradle"
slice.compat = true
apply from: "$rootProject.projectDir/gradle/tests.gradle"

slice {
    java {
        files = fileTree(dir: "$project.ext.topSrcDir/scripts/", includes: ['*.ice'])
    }
}

android {
    compileSdkVersion ice_compileSdkVersion.toInteger()
    buildToolsVersion ice_buildToolsVersion

    defaultConfig {
        applicationId "com.zeroc.testcontroller"
        minSdkVersion ice_minSdkVersion.toInteger()
        targetSdkVersion ice_targetSdkVersion.toInteger()
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
        }
    }
}

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
}

tests.each {
    def name = it.replace("/", "_")
    def taskName = "copyTask-${name}"
    def testName = ":test_${name}"
    def dexName = "test_${name}.dex"
    task "${taskName}"(type: Copy, dependsOn: "${testName}:dexClasses") {
        from "${rootProject.projectDir}/test/src/test_${name}/build/classes/java/main/${dexName}"
        into "src/main/assets"
    }
    preBuild.dependsOn(tasks[taskName])

    clean {
        delete("src/main/assets/${dexName}")
    }
}

task copyBksTask(type: Copy) {
    from "${project.ext.topSrcDir}/certs/client.bks"
    from "${project.ext.topSrcDir}/certs/server.bks"
    into "src/main/res/raw"
}
preBuild.dependsOn(copyBksTask)

clean {
    delete("src/main/res/raw/client.bks")
    delete("src/main/res/raw/server.bks")
}

dependencies {
    compile localDependency('ice-compat')
    compile localDependency('icediscovery-compat')
    compile localDependency('icebt-compat')
    compile project(':test')
}
